/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.InstantMessageInfo', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.InstantMessageInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.InstantMessageInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.InstantMessageInfo.displayName = 'proto.InstantMessageInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.InstantMessageInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.InstantMessageInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.InstantMessageInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InstantMessageInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sendercode: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sendername: jspb.Message.getFieldWithDefault(msg, 3, ""),
    senderavatar: jspb.Message.getFieldWithDefault(msg, 4, ""),
    receivercode: jspb.Message.getFieldWithDefault(msg, 5, ""),
    receivername: jspb.Message.getFieldWithDefault(msg, 6, ""),
    receiveravatar: jspb.Message.getFieldWithDefault(msg, 7, ""),
    receivertype: jspb.Message.getFieldWithDefault(msg, 8, ""),
    contenttype: jspb.Message.getFieldWithDefault(msg, 9, ""),
    stringcontent: jspb.Message.getFieldWithDefault(msg, 10, ""),
    bytescontent: msg.getBytescontent_asB64(),
    messagetime: jspb.Message.getFieldWithDefault(msg, 12, 0),
    filename: jspb.Message.getFieldWithDefault(msg, 13, ""),
    oldmessageid: jspb.Message.getFieldWithDefault(msg, 14, ""),
    chatcode: jspb.Message.getFieldWithDefault(msg, 15, ""),
    chatname: jspb.Message.getFieldWithDefault(msg, 16, ""),
    chatavatar: jspb.Message.getFieldWithDefault(msg, 17, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.InstantMessageInfo}
 */
proto.InstantMessageInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.InstantMessageInfo;
  return proto.InstantMessageInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.InstantMessageInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.InstantMessageInfo}
 */
proto.InstantMessageInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSendercode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSendername(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSenderavatar(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceivercode(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceivername(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceiveravatar(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceivertype(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setContenttype(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setStringcontent(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBytescontent(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMessagetime(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilename(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setOldmessageid(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setChatcode(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setChatname(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setChatavatar(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.InstantMessageInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.InstantMessageInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.InstantMessageInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InstantMessageInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSendercode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSendername();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSenderavatar();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getReceivercode();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getReceivername();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getReceiveravatar();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getReceivertype();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getContenttype();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getStringcontent();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getBytescontent_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      11,
      f
    );
  }
  f = message.getMessagetime();
  if (f !== 0) {
    writer.writeInt64(
      12,
      f
    );
  }
  f = message.getFilename();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getOldmessageid();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getChatcode();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getChatname();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getChatavatar();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
};


/**
 * optional string MessageId = 1;
 * @return {string}
 */
proto.InstantMessageInfo.prototype.getMessageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.InstantMessageInfo.prototype.setMessageid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string SenderCode = 2;
 * @return {string}
 */
proto.InstantMessageInfo.prototype.getSendercode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.InstantMessageInfo.prototype.setSendercode = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string SenderName = 3;
 * @return {string}
 */
proto.InstantMessageInfo.prototype.getSendername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.InstantMessageInfo.prototype.setSendername = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string SenderAvatar = 4;
 * @return {string}
 */
proto.InstantMessageInfo.prototype.getSenderavatar = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.InstantMessageInfo.prototype.setSenderavatar = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string ReceiverCode = 5;
 * @return {string}
 */
proto.InstantMessageInfo.prototype.getReceivercode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.InstantMessageInfo.prototype.setReceivercode = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string ReceiverName = 6;
 * @return {string}
 */
proto.InstantMessageInfo.prototype.getReceivername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.InstantMessageInfo.prototype.setReceivername = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string ReceiverAvatar = 7;
 * @return {string}
 */
proto.InstantMessageInfo.prototype.getReceiveravatar = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.InstantMessageInfo.prototype.setReceiveravatar = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string ReceiverType = 8;
 * @return {string}
 */
proto.InstantMessageInfo.prototype.getReceivertype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.InstantMessageInfo.prototype.setReceivertype = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string ContentType = 9;
 * @return {string}
 */
proto.InstantMessageInfo.prototype.getContenttype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.InstantMessageInfo.prototype.setContenttype = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string StringContent = 10;
 * @return {string}
 */
proto.InstantMessageInfo.prototype.getStringcontent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.InstantMessageInfo.prototype.setStringcontent = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional bytes BytesContent = 11;
 * @return {!(string|Uint8Array)}
 */
proto.InstantMessageInfo.prototype.getBytescontent = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * optional bytes BytesContent = 11;
 * This is a type-conversion wrapper around `getBytescontent()`
 * @return {string}
 */
proto.InstantMessageInfo.prototype.getBytescontent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBytescontent()));
};


/**
 * optional bytes BytesContent = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBytescontent()`
 * @return {!Uint8Array}
 */
proto.InstantMessageInfo.prototype.getBytescontent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBytescontent()));
};


/** @param {!(string|Uint8Array)} value */
proto.InstantMessageInfo.prototype.setBytescontent = function(value) {
  jspb.Message.setProto3BytesField(this, 11, value);
};


/**
 * optional int64 MessageTime = 12;
 * @return {number}
 */
proto.InstantMessageInfo.prototype.getMessagetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.InstantMessageInfo.prototype.setMessagetime = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional string FileName = 13;
 * @return {string}
 */
proto.InstantMessageInfo.prototype.getFilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.InstantMessageInfo.prototype.setFilename = function(value) {
  jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string OldMessageId = 14;
 * @return {string}
 */
proto.InstantMessageInfo.prototype.getOldmessageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.InstantMessageInfo.prototype.setOldmessageid = function(value) {
  jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional string ChatCode = 15;
 * @return {string}
 */
proto.InstantMessageInfo.prototype.getChatcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.InstantMessageInfo.prototype.setChatcode = function(value) {
  jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional string ChatName = 16;
 * @return {string}
 */
proto.InstantMessageInfo.prototype.getChatname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/** @param {string} value */
proto.InstantMessageInfo.prototype.setChatname = function(value) {
  jspb.Message.setProto3StringField(this, 16, value);
};


/**
 * optional string ChatAvatar = 17;
 * @return {string}
 */
proto.InstantMessageInfo.prototype.getChatavatar = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/** @param {string} value */
proto.InstantMessageInfo.prototype.setChatavatar = function(value) {
  jspb.Message.setProto3StringField(this, 17, value);
};


goog.object.extend(exports, proto);
